// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                    String   @id @default(cuid())
  upc                   String?  @unique
  ean                   String?
  gtin                  String?
  isbn                  String?  @unique
  mpn                   String?
  title                 String
  description           String?
  brand                 String?
  model                 String?
  color                 String?
  size                  String?
  dimensions            Json?
  weight                Float?
  weightUnit            String?  // Weight unit (g, kg, lb, oz)
  quantity              Int      @default(0)
  currency              String   @default("USD")
  lowestRecordedPrice   Float?
  highestRecordedPrice  Float?
  lastScanned           DateTime?
  
  // Relations
  images                ProductImage[]
  offers                Offer[]
  categories            ProductCategory[]
  listings              Listing[]
  drafts                Draft[]
  aiContent             AIContent?
  marketResearch        MarketResearch[]
  
  // Legacy fields for compatibility
  name                  String?  // alias for title
  sku                   String?  @unique
  barcode               String?
  price                 Float?
  cost                  Float?
  listingPrice          Float?   // Intended selling price
  material              String?  // Product material
  ageGroup              String?  // Target age group
  theme                 String?  // Product theme
  character             String?  // Character/franchise
  exclusivity           String?  // Product exclusivity
  features              String?  // Product features
  funkoPop              Boolean? // Is Funko Pop product
  itemHeight            Float?   // Item dimensions
  itemLength            Float?
  itemWidth             Float?
  releaseDate           DateTime? // Product release date
  series                String?  // Product series
  category              String?
  condition             String?  // "new", "used", "refurbished"
  enhancementStatus     String?  @default("not_enhanced") // "not_enhanced", "enhanced", "needs_enhancement"
  lastEnhanced          DateTime? // When AI last enhanced this product
  aiGeneratedContent    Json?
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("products")
}

model ProductImage {
  id           String  @id @default(cuid())
  productId    String
  imageNumber  Int
  originalUrl  String
  uploadStatus String  @default("pending")
  url          String?
  altText      String?
  isPrimary    Boolean @default(false)
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("product_images")
}

model Listing {
  id            String        @id @default(cuid())
  productId     String
  platform      String        // Legacy field for backward compatibility
  marketplace   Marketplace?  @relation(fields: [marketplaceId], references: [id])
  marketplaceId String?
  platformId    String?       // External platform listing ID
  title         String
  description   String?
  price         Float
  quantity      Int           @default(1)
  status        ListingStatus @default(DRAFT)
  publishedAt   DateTime?
  endDate       DateTime?
  views         Int           @default(0)
  watchers      Int           @default(0)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("listings")
}

model Draft {
  id            String       @id @default(cuid())
  productId     String?
  title         String?
  description   String?
  price         Float?
  platform      String?      // Legacy field for backward compatibility
  marketplace   Marketplace? @relation(fields: [marketplaceId], references: [id])
  marketplaceId String?
  templateData  Json?        // CPI template data, eBay data, etc.
  notes         String?
  isTemplate    Boolean      @default(false) // Mark as reusable template
  targetMarkets String?      // JSON array of target marketplace IDs for multi-publish
  status        DraftStatus  @default(DRAFT) // Draft workflow status
  product       Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("drafts")
}

model ScanSession {
  id        String   @id @default(cuid())
  sessionId String   @unique
  data      Json?    // Temporary scan data
  status    String   @default("active") // "active", "completed", "expired"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scan_sessions")
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  ENDED
  CANCELLED
}

enum DraftStatus {
  DRAFT
  READY
  PUBLISHED
  ERROR
}

model Offer {
  id           String   @id @default(cuid())
  productId    String
  merchant     String?
  domain       String?
  title        String?
  price        Float?
  listPrice    Float?
  currency     String   @default("USD")
  shipping     String?
  condition    String?
  availability String?
  link         String?
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("offers")
}

model Category {
  id          String   @id @default(cuid())
  type        String   // "google", "ebay", etc.
  categoryId  String
  name        String
  fullPath    String?
  products    ProductCategory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([type, categoryId])
  @@map("categories")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  isPrimary  Boolean  @default(false)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model ApiLog {
  id           String    @id @default(cuid())
  service      String
  endpoint     String
  method       String
  statusCode   Int
  requestData  String?
  responseData String?
  errorMessage String?
  duration     Int?      // Processing time in milliseconds
  createdAt    DateTime  @default(now())

  @@map("api_logs")
}

model CategoryTemplate {
  id              String   @id @default(cuid())
  categoryKey     String   // e.g., 'funko_pops', 'womens_clothing'
  templateName    String   // e.g., 'Standard Funko', 'My Funko Defaults'
  templateData    Json     // Item specifics values
  isDefault       Boolean  @default(false)
  isSystemDefault Boolean  @default(false) // Built-in system templates
  userId          String?  // null for system templates
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([categoryKey, templateName, userId])
  @@map("category_templates")
}

model UserPreference {
  id          String   @id @default(cuid())
  userId      String   // User identifier (could be session-based for now)
  categoryKey String   
  fieldName   String   // Item specific field name
  defaultValue String  // Default value for this field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, categoryKey, fieldName])
  @@map("user_preferences")
}

model AIContent {
  id                    String   @id @default(cuid())
  productId             String   @unique
  seoTitle              String?
  seoDescription        String?
  productDescription    String?
  bulletPoints          String?  // JSON string
  tags                  String?  // JSON string
  category              String?
  specifications        String?  // JSON string
  marketingCopy         String?
  ebayTitle            String?
  shortDescription      String?
  uniqueSellingPoints   String?  // JSON string
  keyFeatures          String?  // JSON string
  specificationsArray   String?  // JSON string
  itemSpecifics        String?  // JSON string
  additionalAttributes String?  // JSON string
  status               String   @default("pending") // pending, processing, completed, failed
  aiModel              String?
  generatedAt          DateTime?
  processingTime       Int?
  product              Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("ai_content")
}

model MarketResearch {
  id               String   @id @default(cuid())
  productId        String
  suggestedPrice   Float?
  priceRangeMin    Float?
  priceRangeMax    Float?
  competitorCount  Int?
  researchData     Json?    // Raw research data
  researchedAt     DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("market_research")
}

// Multi-marketplace support models
model Marketplace {
  id          String   @id @default(cuid())
  name        String   @unique // "EBAY", "AMAZON", "WALMART", "FACEBOOK", "BASELINKER"
  displayName String   // "eBay", "Amazon", "Walmart", "Facebook Marketplace", "BaseLinker"
  isEnabled   Boolean  @default(true)
  apiConfig   Json?    // API credentials and configuration
  fieldMapping Json?   // Field mapping rules for this marketplace
  templates   Json?    // Default templates for this marketplace
  settings    Json?    // Marketplace-specific settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  drafts      Draft[]
  listings    Listing[]
  exportJobs  ExportJob[]

  @@map("marketplaces")
}

model ExportJob {
  id            String      @id @default(cuid())
  type          ExportType  // "CSV", "API", "BASELINKER"
  marketplace   Marketplace @relation(fields: [marketplaceId], references: [id])
  marketplaceId String
  productIds    String      // JSON array of product IDs
  status        ExportStatus @default(PENDING)
  fileName      String?     // For CSV exports
  filePath      String?     // Local file path for CSV
  downloadUrl   String?     // Public download URL
  errorMessage  String?
  totalItems    Int         @default(0)
  processedItems Int        @default(0)
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("export_jobs")
}

enum ExportType {
  CSV
  API
  BASELINKER
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// BaseLinker specific models
model BaseLinkerConfig {
  id          String   @id @default(cuid())
  apiToken    String   // BaseLinker API token
  isActive    Boolean  @default(true)
  lastSync    DateTime?
  settings    Json?    // Additional BaseLinker settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("baselinker_config")
}
