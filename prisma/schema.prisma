// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  upc         String   @unique
  ean         String?
  gtin        String?
  title       String
  description String?
  brand       String?
  model       String?
  color       String?
  size        String?
  dimensions  String?
  weight      String?
  condition   String   @default("New")
  quantity    Int      @default(0)
  currency    String   @default("USD")
  lowestRecordedPrice  Float?
  highestRecordedPrice Float?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastScanned DateTime?
  
  // Relations
  images      ProductImage[]
  offers      Offer[]
  aiContent   AIContent?
  categories  ProductCategory[]
  scanItems   ScanItem[]
  
  @@map("products")
}

model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  imageNumber Int
  originalUrl String?
  localPath   String?
  uploadStatus String  @default("pending")
  metadata    String? // JSON metadata
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, imageNumber])
  @@map("product_images")
}

model Category {
  id           String @id @default(cuid())
  type         String // "google" or "ebay"
  categoryId   String? // External category ID
  name         String
  fullPath     String
  parentId     String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  parent       Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryHierarchy")
  products     ProductCategory[]
  
  @@unique([type, categoryId])
  @@map("categories")
}

model ProductCategory {
  id         String @id @default(cuid())
  productId  String
  categoryId String
  isPrimary  Boolean @default(false)
  
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([productId, categoryId])
  @@map("product_categories")
}

model Offer {
  id           String  @id @default(cuid())
  productId    String
  merchant     String
  domain       String?
  title        String?
  price        Float?
  listPrice    Float?
  currency     String  @default("USD")
  shipping     String?
  condition    String?
  availability String?
  link         String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("offers")
}

model AIContent {
  id                    String   @id @default(cuid())
  productId             String   @unique
  
  // Generated content (matching Gemini service structure)
  seoTitle              String?
  seoDescription        String?
  productDescription    String?  // Main AI-generated description
  bulletPoints          String?  // JSON array of feature bullets
  tags                  String?  // JSON array of SEO tags
  category              String?  // AI-suggested category
  specifications        String?  // JSON object of specs
  marketingCopy         String?  // Sales-focused copy
  
  // eBay-focused fields
  ebayTitle             String?  // 80 character eBay title
  shortDescription      String?  // 150 character short description
  uniqueSellingPoints   String?  // JSON array of USPs
  keyFeatures           String?  // JSON array of key features
  specificationsArray   String?  // JSON array of specifications (alternative to object)
  itemSpecifics         String?  // JSON object of item specifics
  additionalAttributes  String?  // JSON object of additional attributes
  
  // Processing status and metadata
  status                String   @default("pending") // pending, processing, completed, failed
  aiModel               String?  // Which model generated the content
  generatedAt           DateTime?
  processingTime        Int?     // milliseconds
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  product               Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("ai_content")
}

model ScanSession {
  id          String     @id @default(cuid())
  name        String?
  status      String     @default("active") // active, completed, archived
  totalItems  Int        @default(0)
  uniqueItems Int        @default(0)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  
  items       ScanItem[]
  
  @@map("scan_sessions")
}

model ScanItem {
  id            String      @id @default(cuid())
  sessionId     String
  productId     String
  quantity      Int         @default(1)
  scannedAt     DateTime    @default(now())
  
  session       ScanSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, productId])
  @@map("scan_items")
}

model ApiLog {
  id            String   @id @default(cuid())
  service       String   // "upcitemdb", "gemini", "claude", etc.
  endpoint      String?
  method        String   @default("GET")
  statusCode    Int?
  requestData   String?  // JSON
  responseData  String?  // JSON
  errorMessage  String?
  duration      Int?     // milliseconds
  
  createdAt     DateTime @default(now())
  
  @@map("api_logs")
}

model Settings {
  id           String   @id @default(cuid())
  key          String   @unique
  value        String
  type         String   @default("string") // string, number, boolean, json
  description  String?
  isEncrypted  Boolean  @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("settings")
}
